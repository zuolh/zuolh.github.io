<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zuolh</title>
  
  <subtitle>测试：左爷</subtitle>
  <link href="https://www.zuolh.com/atom.xml" rel="self"/>
  
  <link href="https://www.zuolh.com/"/>
  <updated>2021-09-07T08:02:38.953Z</updated>
  <id>https://www.zuolh.com/</id>
  
  <author>
    <name>zuolh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>allure命令行生成报告页面空白问题</title>
    <link href="https://www.zuolh.com/2021/09/07/yuque/allure%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E6%8A%A5%E5%91%8A%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/"/>
    <id>https://www.zuolh.com/2021/09/07/yuque/allure%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E6%8A%A5%E5%91%8A%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/</id>
    <published>2021-09-07T07:55:46.000Z</published>
    <updated>2021-09-07T08:02:38.953Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/"></a><br>本人一开始下载的版本是 2.13.10，后面经过验证发现是版本过高，导致打开报告出错了，后来下载了 2.11.0 版本；<br>​</p><p>其他版本 allure 插件下载地址：<a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/">https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1631001503711-f2b8515b-99fb-44db-99e7-6ef35704731b.png#clientId=ub3c96da5-92e8-4&from=paste&height=326&id=u9501f01a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=651&originWidth=975&originalType=binary%E2%88%B6=1&size=64028&status=done&style=none&taskId=u94be5fd2-f5aa-453e-b590-ff50d9d87a3&width=487.5" alt="image.png"><br>重新配置好环境变量，验证版本<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1631001573641-bb3af674-ad72-4237-8bbf-d354e335787c.png#clientId=ub3c96da5-92e8-4&from=paste&height=54&id=uf7683962&margin=%5Bobject%20Object%5D&name=image.png&originHeight=53&originWidth=388&originalType=binary%E2%88%B6=1&size=3966&status=done&style=none&taskId=u568af125-1b08-486c-bdde-b2bddd6ed41&width=394" alt="image.png"></p><p>再次在项目目录下，通过命令打开测试报告：allure serve target/allure-results<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1631001677764-abcdc12d-1774-4402-bf50-3ca7d8822bca.png#clientId=ub3c96da5-92e8-4&from=paste&height=315&id=u4ecc371e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=630&originWidth=1817&originalType=binary%E2%88%B6=1&size=87428&status=done&style=none&taskId=uc25b0ee2-ae22-449b-a963-582cc2a62e8&width=908.5" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/&quot;&gt;
&lt;/a&gt;&lt;br&gt;本人一开始下载的版本是 2.13.10，后面经过验证发现是版本过高，导致打开报告出错了，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git创建多个ssh key</title>
    <link href="https://www.zuolh.com/2021/08/26/yuque/Git%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAssh%20key/"/>
    <id>https://www.zuolh.com/2021/08/26/yuque/Git%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAssh%20key/</id>
    <published>2021-08-26T09:24:35.000Z</published>
    <updated>2021-09-07T08:02:38.985Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 git 的时候，遇到需要创建多个 ssh key 的需求，一个用来 git hub 项目，一个用来 git lab 项目；<br>之前如果已将创建过一个 ssh key，那么在创建第二个的时候，要修改默认名称，然后增加配置文件；<br>之前创建 ssh key 生成了如下两个文件，一个私钥，一个公钥<br>id_rsa<br>id_rsa.pub<br>​</p><p>我们要生成新的一个 ssh key，由于路径跟之前的一直，所以要改个名字<br>id_rsa_gitlab<br>id_rsa_gitlab.pub<br>​</p><p>具体如下<br>ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitlab -C “<a href="mailto:&#x61;&#x40;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x40;&#x62;&#x2e;&#99;&#x6f;&#109;</a>“<br>​</p><p>注意：因为 SSH 默认只读取 id_rsa,为了让 SSH 识别新的私钥,需要使用命令将其添加到 SSH agent,命令如下：<br>ssh-add ~/.ssh/id_rsa<br>ssh-add ~/.ssh/id_rsa_gitlab<br>​</p><p>若执行 ssh-add 时提示“Could not open a connection to your authentication agent”,则执行下面的命令：<br>ssh-agent bash<br>然后再运行 ssh-add 命令(可以通过 ssh-add -l 查看私钥列表)；<br>​</p><p>接着修改配置文件：<br>在~./ssh 目录下新建一个 config 文件,命令如下：<br>touch config<br>​</p><p>配置文件如下：<br>#github<br>Host github.com<br>IdentityFile ~/.ssh/id_rsa<br>User <a href="mailto:&#97;&#x40;&#98;&#46;&#99;&#x6f;&#109;">&#97;&#x40;&#98;&#46;&#99;&#x6f;&#109;</a><br>#gitlab<br>Host gitlab.com<br>IdentityFile ~/.ssh/id_rsa_gitlab<br>User <a href="mailto:&#97;&#x40;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#97;&#x40;&#x62;&#x2e;&#x63;&#x6f;&#109;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用 git 的时候，遇到需要创建多个 ssh key 的需求，一个用来 git hub 项目，一个用来 git lab 项目；&lt;br&gt;之前如果已将创建过一个 ssh key，那么在创建第二个的时候，要修改默认名称，然后增加配置文件；&lt;br&gt;之前创建 ssh key 生成</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://www.zuolh.com/2021/07/23/yuque/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.zuolh.com/2021/07/23/yuque/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-23T10:22:32.000Z</published>
    <updated>2021-09-07T08:02:38.985Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://www.zuolh.com/2021/07/23/yuque/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.zuolh.com/2021/07/23/yuque/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-23T06:26:40.000Z</published>
    <updated>2021-09-07T08:02:38.989Z</updated>
    
    <content type="html"><![CDATA[<p>查看进程：ps -ef | grep XXX<br>杀进程：kill -9 XXX<br>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看进程：ps -ef | grep XXX&lt;br&gt;杀进程：kill -9 XXX&lt;br&gt;​&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>idea的Artifacts工具打包jmeter中无法调用的问题</title>
    <link href="https://www.zuolh.com/2021/06/16/yuque/idea%E7%9A%84Artifacts%E5%B7%A5%E5%85%B7%E6%89%93%E5%8C%85jmeter%E4%B8%AD%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.zuolh.com/2021/06/16/yuque/idea%E7%9A%84Artifacts%E5%B7%A5%E5%85%B7%E6%89%93%E5%8C%85jmeter%E4%B8%AD%E6%97%A0%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-16T07:53:16.000Z</published>
    <updated>2021-09-07T08:02:39.009Z</updated>
    
    <content type="html"><![CDATA[<p>jmeter 是用来做接口测试，但是接口调用需要进行 sign，所以需要对开发对加密的方法类进行打包放在 jmeter 中进行调用，但是出现了打包在 jmeter 中依旧报错的问题，后面发现是 idea 打包的 Artifacts 工具打出来的包在 jmeter 中识别不了，又通过 maven 插件帮助打包才可以使用，打包方式如下：<br>在 maven 工程的 pom 文件的插件部分加入以下代码（注意：插入在 build 下，而非 pluginManagement 下）<br>​</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">></span></span>      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.3</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">></span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>target<span class="token punctuation">></span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">></span></span>      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>maven<span class="token operator">-</span>assembly<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>descriptorRefs<span class="token punctuation">></span></span>          <span class="token generics"><span class="token punctuation">&lt;</span>descriptorRef<span class="token punctuation">></span></span>jar<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>descriptorRef<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>descriptorRefs<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>archive<span class="token punctuation">></span></span>          <span class="token generics"><span class="token punctuation">&lt;</span>manifest<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>mainClass<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>dx<span class="token operator">&lt;</span><span class="token operator">/</span>mainClass<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里改成自己的主类位置<span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>manifest<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>archive<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>executions<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>execution<span class="token punctuation">></span></span>          <span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span>make<span class="token operator">-</span>assembly<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>          <span class="token generics"><span class="token punctuation">&lt;</span>phase<span class="token punctuation">></span></span><span class="token keyword">package</span><span class="token operator">&lt;</span><span class="token operator">/</span>phase<span class="token operator">></span>          <span class="token generics"><span class="token punctuation">&lt;</span>goals<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>goal<span class="token punctuation">></span></span>single<span class="token operator">&lt;</span><span class="token operator">/</span>goal<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>goals<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>execution<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>executions<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span></code></pre><p>用 maven 工具打包<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1623830035439-c3439866-6614-409f-969e-3ba69e82a0a0.png#clientId=u081f34b9-64d8-4&from=paste&id=u3e233003&margin=%5Bobject%20Object%5D&originHeight=823&originWidth=1926&originalType=url%E2%88%B6=1&status=done&style=none&taskId=uc7e7ba36-59ad-48c1-8fb7-e948026c2fa"><br>之后可以在左侧的 target 文件夹中看到胖瘦两包<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1623830051081-d56afd08-b1d9-4145-a888-6a711250a29c.png#clientId=u081f34b9-64d8-4&from=paste&id=ud47e0e5d&margin=%5Bobject%20Object%5D&originHeight=357&originWidth=486&originalType=url%E2%88%B6=1&status=done&style=none&taskId=u4d8405ba-d311-437a-b8fc-d214282ca1f"></p><p>将胖包 getDxSign-1.0-SNAPSHOT-jar-with-dependencies.jar 放到 jmeter 的\apache-jmeter-5.1.1\lib\ext 目录下<br>在 jmeter 中通过 beanshell 方式编写代码导入即可调用对应的方法<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1623830064603-d15e865f-3c5e-4300-8bad-84d6f210ce2d.png#clientId=u081f34b9-64d8-4&from=paste&id=uce8ceaf2&margin=%5Bobject%20Object%5D&originHeight=555&originWidth=590&originalType=url%E2%88%B6=1&status=done&style=none&taskId=ud12a585d-84ca-41b9-806a-e6320ae46ed"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jmeter 是用来做接口测试，但是接口调用需要进行 sign，所以需要对开发对加密的方法类进行打包放在 jmeter 中进行调用，但是出现了打包在 jmeter 中依旧报错的问题，后面发现是 idea 打包的 Artifacts 工具打出来的包在 jmeter 中识别不了</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springboot集成swagger2错误解决java.lang.IllegalArgumentException: No enum constant org.springframework.web.bind.annotation...</title>
    <link href="https://www.zuolh.com/2021/05/11/yuque/springboot%E9%9B%86%E6%88%90swagger2%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3java.lang.IllegalArgumentException!%20No%20enum%20constant%20org.springframework.web/"/>
    <id>https://www.zuolh.com/2021/05/11/yuque/springboot%E9%9B%86%E6%88%90swagger2%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3java.lang.IllegalArgumentException!%20No%20enum%20constant%20org.springframework.web/</id>
    <published>2021-05-11T08:20:02.000Z</published>
    <updated>2021-09-07T08:02:39.029Z</updated>
    
    <content type="html"><![CDATA[<p>springboot 在集成 swagger2 启动时遇到如下错误：</p><pre class="language-none"><code class="language-none">java.lang.IllegalArgumentException: No enum constant org.springframework.web.bind.annotation.RequestMethod.postat java.lang.Enum.valueOf(Enum.java:238) ~[na:1.8.0_261]at org.springframework.web.bind.annotation.RequestMethod.valueOf(RequestMethod.java:35) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]at springfox.documentation.swagger.readers.operation.OperationHttpMethodReader.apply(OperationHttpMethodReader.java:49) ~[springfox-swagger-common-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.plugins.DocumentationPluginsManager.operation(DocumentationPluginsManager.java:123) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.readers.operation.ApiOperationReader.read(ApiOperationReader.java:73) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.scanners.CachingOperationReader$1.load(CachingOperationReader.java:50) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.scanners.CachingOperationReader$1.load(CachingOperationReader.java:48) [springfox-spring-web-2.6.1.jar:2.6.1]at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527) [guava-18.0.jar:na]at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319) [guava-18.0.jar:na]at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282) [guava-18.0.jar:na]at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197) [guava-18.0.jar:na]at com.google.common.cache.LocalCache.get(LocalCache.java:3937) [guava-18.0.jar:na]at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941) [guava-18.0.jar:na]at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824) [guava-18.0.jar:na]at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830) [guava-18.0.jar:na]at springfox.documentation.spring.web.scanners.CachingOperationReader.read(CachingOperationReader.java:57) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.scanners.ApiDescriptionReader.read(ApiDescriptionReader.java:66) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.scanners.ApiListingScanner.scan(ApiListingScanner.java:89) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.scanners.ApiDocumentationScanner.scan(ApiDocumentationScanner.java:70) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.scanDocumentation(DocumentationPluginsBootstrapper.java:85) [springfox-spring-web-2.6.1.jar:2.6.1]at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:127) [springfox-spring-web-2.6.1.jar:2.6.1]at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:163) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) [spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]at com.zuolh.lab.Application.main(Application.java:19) [classes&#x2F;:na]</code></pre><p>在 controller 中用的是注解@RequestMapping,在集成 swagger2 之前可以正常访问， 那问题就一定处在 swagger2 相关的 code 中， 于是检查在 code 中哪里用到了 httpMethod, 发现了问题所在：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RequestMethod</span> <span class="token punctuation">&#123;</span>    GET<span class="token punctuation">,</span>    HEAD<span class="token punctuation">,</span>    POST<span class="token punctuation">,</span>    PUT<span class="token punctuation">,</span>    PATCH<span class="token punctuation">,</span>    DELETE<span class="token punctuation">,</span>    OPTIONS<span class="token punctuation">,</span>    TRACE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span></code></pre><p>枚举类中 method 方法都是大写， 而我的代码中将 httpmethod 写成了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"登录成功后获取cookies信息"</span><span class="token punctuation">,</span> httpMethod <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">)</span></code></pre><p>所以只需要将 httpMethod=”post”改为 httpMethod = “POST”就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;springboot 在集成 swagger2 启动时遇到如下错误：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;java.lang.IllegalArgumentException: No enum</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>返回cookies信息的post请求的开发</title>
    <link href="https://www.zuolh.com/2021/05/10/yuque/%E8%BF%94%E5%9B%9Ecookies%E4%BF%A1%E6%81%AF%E7%9A%84post%E8%AF%B7%E6%B1%82%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <id>https://www.zuolh.com/2021/05/10/yuque/%E8%BF%94%E5%9B%9Ecookies%E4%BF%A1%E6%81%AF%E7%9A%84post%E8%AF%B7%E6%B1%82%E7%9A%84%E5%BC%80%E5%8F%91/</id>
    <published>2021-05-10T05:30:02.000Z</published>
    <updated>2021-09-07T08:02:39.037Z</updated>
    
    <content type="html"><![CDATA[<p>在包 com.zuolh.lab 下创建一个 MyPostMethod 类，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zuolh<span class="token punctuation">.</span>lab</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiImplicitParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p/> * * @author zuolihong * @version 1.0 * @className MyPostMethod * @date 2021/5/8 17:22 */</span><span class="token annotation punctuation">@RestController</span><span class="token comment">//访问地址前要加/postApi</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/postApi"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPostMethod</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Cookie</span> cookie<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"登录成功后获取cookies信息"</span><span class="token punctuation">,</span> httpMethod <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"登录"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"loginName"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> loginName<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"zuolh"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"恭喜登录成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"用户名或者密码错误"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行成功后通过 jmeter 进行调用：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1620639197162-9303adcf-a146-433f-9ee9-0f690babd72b.png#clientId=ue8e0452e-2690-4&from=paste&height=289&id=u77e78918&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=1916&originalType=binary&size=88624&status=done&style=none&taskId=ue2baba25-25e5-48f0-a17d-7c01770362d&width=958" alt="image.png"><br>调用结果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1620639317643-c1ed883c-ff78-4ca0-beb8-74e0b22ec5b6.png#clientId=ue8e0452e-2690-4&from=paste&height=274&id=u8f008c06&margin=%5Bobject%20Object%5D&name=image.png&originHeight=548&originWidth=1278&originalType=binary&size=68166&status=done&style=none&taskId=uf4b17d32-b5ae-4e30-a1e4-0fca79b68fd&width=639" alt="image.png"></p><p>添加 Debug Sampler 查看 cookie 信息 jmeter 里添加 sampler→Debug Sampler，去 jmeter 所在的 bin 目录下的 jmeter.properties 文件，将“#CookieManager.save.cookies=false”修改成“CookieManager.save.cookies=true”保存，重启 jmeter，重新调用，查看 Debug Sampler<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1620640045725-cefde99e-d1b3-4cff-9781-0f64c450558e.png#clientId=ue8e0452e-2690-4&from=paste&height=95&id=u9cd06a49&margin=%5Bobject%20Object%5D&name=image.png&originHeight=189&originWidth=654&originalType=binary&size=20675&status=done&style=none&taskId=u5d79b483-7d73-4d40-918d-a876b92d48e&width=327" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1620639983685-14f4a941-284a-4dbb-9a52-83a29ae3635f.png#clientId=ue8e0452e-2690-4&from=paste&height=326&id=uf188078d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=651&originWidth=1380&originalType=binary&size=91720&status=done&style=none&taskId=u085650cc-bb4d-4d99-866d-876976c8bae&width=690" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在包 com.zuolh.lab 下创建一个 MyPostMethod 类，代码如下：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot + Swagger2-ui 自动生成API文档</title>
    <link href="https://www.zuolh.com/2021/05/08/yuque/SpringBoot%20+%20Swagger2-ui%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/"/>
    <id>https://www.zuolh.com/2021/05/08/yuque/SpringBoot%20+%20Swagger2-ui%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/</id>
    <published>2021-05-08T06:35:33.000Z</published>
    <updated>2021-09-07T08:02:39.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Swagger"><a href="#什么是-Swagger" class="headerlink" title="什么是 Swagger"></a>什么是 Swagger</h2><p>Swagger 是一个 Restful 风格接口的文档在线自动生成和测试的框架<br>官网：<a href="http://swagger.io/">http://swagger.io</a><br>官方描述：The World’s Most Popular Framework for APIs.</p><h2 id="springboot-集成-swagger-ui"><a href="#springboot-集成-swagger-ui" class="headerlink" title="springboot 集成 swagger -ui"></a>springboot 集成 swagger -ui</h2><h3 id="1、pom-xml-中添加依赖"><a href="#1、pom-xml-中添加依赖" class="headerlink" title="1、pom.xml 中添加依赖"></a>1、pom.xml 中添加依赖</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.6</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.6</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="2、在-Application-同级目录新建-SwaggerController-文件"><a href="#2、在-Application-同级目录新建-SwaggerController-文件" class="headerlink" title="2、在 Application 同级目录新建 SwaggerController 文件"></a>2、在 Application 同级目录新建 SwaggerController 文件</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zuolh<span class="token punctuation">.</span>lab</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span>  <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span>  <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span><span class="token punctuation">;</span><span class="token keyword">import</span>  <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span><span class="token punctuation">;</span><span class="token comment">//swagger2的配置文件，在项目的启动类的同级文件建立</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment">//是否开启swagger，正式环境一般是需要关闭的（避免不必要的漏洞暴露！），可根据springboot的多环境配置进行设置</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"swagger.enable"</span><span class="token punctuation">,</span>  havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// swagger2的配置文件，这里可以配置swagger2的一些基本的内容，比如扫描的包等等</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">pathMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 为当前包路径</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.zuolh.lab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 构建 api文档的详细信息函数,注意这里的注解引用的是哪个</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 页面标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"zuolh的接口文档"</span><span class="token punctuation">)</span>                <span class="token comment">// 创建人信息</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"zuolh"</span><span class="token punctuation">)</span>                <span class="token comment">// 版本号</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token comment">// 描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"更多请关注：https://www.zuolh.com/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.zuolh.com/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、在-controller-上添加注解，自动生成-API"><a href="#3、在-controller-上添加注解，自动生成-API" class="headerlink" title="3、在 controller 上添加注解，自动生成 API"></a>3、在 controller 上添加注解，自动生成 API</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zuolh<span class="token punctuation">.</span>lab</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiImplicitParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p/> * * @author zuolihong * @version 1.0 * @className MyGetMethod * @date 2021/4/30 14:27 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/zuo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"get请求"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGetMethod</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调用接口将cookie信息加到浏览器的cookie中去     * @param response     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"向浏览器添加cookies信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addCookies"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addCookies</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span><span class="token string">"true1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"返回cookies信息成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 要求客户端携带cookies访问     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/with/cookies"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"判断访问是否带入cookie信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWithCookies</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"必须携带cookies信息111"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie<span class="token operator">:</span>cookies<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token operator">+</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"login1"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"访问成功"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"必须携带cookies信息2222"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 第一种：需要访问携带参数的get请求，参数格式是param=p1&amp;&amp;param1=p2     *     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/with/param"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"访问带有参数"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"输入的服饰类型"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"裤子"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWithParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">putList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">putList</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"鞋子"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"裤子"</span><span class="token punctuation">,</span><span class="token string">"500dddddddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 第二种：需要访问携带参数的get请求，参数格式是ip:port/get/cookies/param1/param2格式     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"访问带的参数格式与上一个方法不同"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/with/param/&#123;a&#125;"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWithParam1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"鞋子"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"裤子"</span><span class="token punctuation">,</span><span class="token string">"500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注解含义：</p><pre class="language-none"><code class="language-none">@Api：用在请求的类上，表示对类的说明    tags&#x3D;&quot;说明该类的作用，可以在UI界面上看到的注解&quot;    value&#x3D;&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;@ApiOperation：用在请求的方法上，说明方法的用途、作用    value&#x3D;&quot;说明方法的用途、作用&quot;    notes&#x3D;&quot;方法的备注说明&quot;@ApiImplicitParams：用在请求的方法上，表示一组参数说明    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面        name：参数名        value：参数的汉字说明、解释        required：参数是否必须传        paramType：参数放在哪个地方            · header --&gt; 请求参数的获取：@RequestHeader            · query --&gt; 请求参数的获取：@RequestParam            · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable            · body（不常用）            · form（不常用）        dataType：参数类型，默认String，其它值dataType&#x3D;&quot;Integer&quot;        defaultValue：参数的默认值@ApiResponses：用在请求的方法上，表示一组响应    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息        code：数字，例如400        message：信息，例如&quot;请求参数没填好&quot;        response：抛出异常的类@ApiModel：用于响应类上，表示一个返回响应数据的信息            （这种一般用在post创建的时候，使用@RequestBody这样的场景，            请求参数无法使用@ApiImplicitParam注解进行描述的时候）    @ApiModelProperty：用在属性上，描述响应类的属性</code></pre><h3 id="4、启动后效果图："><a href="#4、启动后效果图：" class="headerlink" title="4、启动后效果图："></a>4、启动后效果图：</h3><p>启动成功后访问：<a href="http://localhost:8889/swagger-ui.html">http://localhost:8889/swagger-ui.html</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1308119/1620458951219-5c749f57-5e93-4006-b527-d328d457a8d1.png#clientId=uc479500f-720b-4&from=paste&height=350&id=u0456349e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=699&originWidth=1714&originalType=binary&size=79695&status=done&style=none&taskId=u64d9917e-c683-42ba-88f8-65651cc20f5&width=857" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Swagger&quot;&gt;&lt;a href=&quot;#什么是-Swagger&quot; class=&quot;headerlink&quot; title=&quot;什么是 Swagger&quot;&gt;&lt;/a&gt;什么是 Swagger&lt;/h2&gt;&lt;p&gt;Swagger 是一个 Restful 风格接口的文档在线自动生成和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件测试工具大全（持续更新）</title>
    <link href="https://www.zuolh.com/2021/04/13/yuque/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>https://www.zuolh.com/2021/04/13/yuque/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2021-04-13T15:40:07.000Z</published>
    <updated>2021-09-07T08:02:39.205Z</updated>
    
    <content type="html"><![CDATA[<p>软件测试工具大全，包括测试工具、框架和平台，偏向开源和免费。</p><p><strong>说明</strong><br>表示<strong>开源软件</strong>；<br>表示<strong>免费</strong>使用，或者个人<strong>免费</strong> ；<br>表示仅限 <strong>macOS</strong> 使用；</p><h1 id="一-大前端"><a href="#一-大前端" class="headerlink" title="一. 大前端"></a>一. 大前端</h1><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><h3 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h3><ul><li><a href="https://github.com/Meituan-Dianping/lyrebird">Lyrebird</a> - 移动端的抓包及 Mock 平台。（美团）</li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ul><li><a href="https://perfdog.qq.com/">PerfDog</a> - 一款用于采集手机（Android&amp;iOS）性能数据的 PC 端工具。（腾讯）</li><li><a href="https://github.com/alibaba/mobileperf">mobileperf</a> - 基于 Python 实现的 Android 性能采集工具。（阿里）</li><li><a href="https://github.com/pyroscope-io/pyroscope/blob/main/translations/README.ch.md">Pyroscope</a> - 基于 Go 的开源实时性能分析平台。能帮你找出代码的性能问题、CPU 使用过高的原因，还有丰富的图表和调用树展示。</li><li><a href="https://github.com/Tencent/loli_profiler"><strong>LoliProfiler</strong></a>** - **用于 <strong>Android <strong>游戏和应用程序的</strong>C/C ++ 内存分析</strong>工具。（腾讯）</li></ul><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p><strong>跨平台</strong></p><ul><li><a href="https://github.com/appium/appium">Appium</a> - 用于 iOS、Android 和 Windows Apps 的自动化。</li><li><a href="https://github.com/wix/Detox">Detox</a> - 端到端的移动应用测试和自动化框架。</li><li><a href="https://github.com/intuit/karate">Karate</a> - UI/API 自动化测试框架。</li></ul><p><strong>Android</strong></p><ul><li><a href="https://github.com/alipay/SoloPi">SoloPi</a> - 支持录制回放、一机多控和性能测试的 Android 自动化测试工具。（蚂蚁）</li><li><a href="https://github.com/Genymobile/scrcpy">scrcpy</a> - 显示和控制你的 Android 设备。（Genymobile）</li><li><a href="https://github.com/DeviceFarmer/minicap">minicap</a> - 从 Android 设备中流式传输实时屏幕捕获数据。（STF）</li><li><a href="https://github.com/JeffLIrion/adb_shell">adb_shell</a> - ADB 的 Python 实现，具有 Shell 和 FileSync 功能。</li><li><a href="https://github.com/google/python-adb">python-adb</a> - Python ADB + Fastboot 实现。（Google）</li><li><a href="https://github.com/JakeWharton/adb-event-mirror">ADB Event Mirror</a> - 通过命令行实现 Android 设备的一机多控。</li><li><a href="https://github.com/ashishb/adb-enhanced">ADB Enhanced</a> - 增强 ADB 命令。</li><li><a href="https://github.com/openatx/uiautomator2">uiautomator2</a> - Android Uiautomator2 Python 包装器。（openatx）</li><li><a href="https://github.com/google/mobly">Moby</a> - E2E 测试框架，用于具有复杂环境要求的测试。（Google）</li><li><a href="https://github.com/budtmo/docker-android">Docker-Android</a> - Android in docker 解决方案，支持 noVNC 和视频录制。</li></ul><p><strong>iOS</strong></p><ul><li><a href="https://github.com/appium/WebDriverAgent">WebDriverAgent</a> - iOS 的 WebDriver 服务实现，可用于远程控制 iOS 设备。</li><li><a href="https://github.com/openatx/facebook-wda">python-wda</a> - Facebook WebDriverAgent Python 客户端库。（openatx）</li><li><a href="https://github.com/alibaba/taobao-iphone-device">tidevice</a> - iOS 自动化命令行工具。（阿里）</li><li><a href="https://github.com/libimobiledevice/libimobiledevice">libimobiledevice</a> - 使用本机协议与 iOS 设备上的服务进行通信。</li><li><a href="https://github.com/iOSForensics/pymobiledevice">pymobiledevice</a> - libimobiledevice 跨平台软件库的 python 实现。</li><li><a href="https://github.com/facebook/idb">idb</a> - 用于自动化 iOS 模拟器和设备的命令行工具。</li><li><a href="https://github.com/google/EarlGrey">EarlGrey</a> - iOS UI 自动化测试框架。（Google）</li><li><a href="https://github.com/kif-framework/KIF">KIF</a> - 保持功能正常 - iOS 功能测试框架。</li></ul><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><ul><li><a href="https://git.weixin.qq.com/minitest/minium-doc/tree/master">Minium</a> - 微信小程序自动化框架, 提供了 Python 和 JavaScript 版本。（腾讯</li></ul><h3 id="测试平台"><a href="#测试平台" class="headerlink" title="测试平台"></a>测试平台</h3><ul><li><a href="https://github.com/DeviceFarmer/stf">STF</a> - 基于 Agular 和 Node.js 实现的移动设备管理平台</li><li><a href="https://github.com/openatx/atxserver2">atxserver2</a> - 基于 Python 实现的移动设备管理平台。</li><li><a href="https://github.com/didi/DoraemonKit"><strong>DoraemonKit</strong></a>** - **一款功能齐全的客户端（ iOS 、Android、微信小程序、Flutter ）研发助手。（滴滴）</li></ul><h2 id="Web-端"><a href="#Web-端" class="headerlink" title="Web 端"></a>Web 端</h2><ul><li><a href="https://github.com/jhy/jsoup">jsoup</a> - Java HTML 解析器。</li></ul><h3 id="自动化-1"><a href="#自动化-1" class="headerlink" title="自动化"></a>自动化</h3><ul><li><a href="https://github.com/cypress-io/cypress">cypress</a> - 对浏览器中运行的所有内容进行快速，轻松和可靠的测试。</li><li><a href="https://github.com/qawolf/qawolf">qawolf</a> - 将浏览器的测试速度提高了 10 倍。</li><li><a href="https://github.com/DevExpress/testcafe">TestCafe</a> - 基于 Node.js 的端到端 Web 自动化测试工具。</li><li><a href="https://github.com/marmelab/gremlins.js">gremlins.js</a> - 用于 Web 应用程序和 Node.js 的 Monkey 测试库。</li><li><a href="https://github.com/mherrmann/selenium-python-helium">Helium</a> - 用于 Web 自动化的最佳 Python 库。</li><li><a href="https://github.com/aerokube/selenoid">Selenoid</a> - 使用 Docker 容器启动浏览器的 Selenium hub 的强大实现。</li><li><a href="https://github.com/teamcapybara/capybara">Capybara</a> - Web 应用程序的验收测试框架。</li><li><a href="https://github.com/selenide/selenide">selenide</a> - 使用 Java 进行简洁的 UI 测试。</li><li><a href="https://github.com/cobrateam/splinter">splinter</a> - 用于 Web 应用程序的 Python 测试框架。</li><li><a href="https://github.com/getgauge/gauge">gauge</a> - 提供可靠的浏览器自动化测试框架。</li></ul><h2 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h2><h3 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h3><ul><li><a href="https://github.com/electron-userland/spectron">Spectron</a> - 使用 ChromeDriver 和 WebdriverIO 轻松测试你的 Electron 应用程序 。</li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><h1 id="二-服务端"><a href="#二-服务端" class="headerlink" title="二. 服务端"></a>二. 服务端</h1><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p><strong>Mock</strong></p><ul><li><a href="https://hellogithub.com/periodical/statistics/click/?target=https://github.com/kevin1024/vcrpy">vcrpy</a> - 自动模拟 HTTP 交互。</li><li><a href="https://github.com/mockoon/mockoon">Mockoon</a> - 本地运行模拟 API 的最简单，最快的方法。</li></ul><p><strong>抓包</strong></p><ul><li><a href="https://www.telerik.com/fiddler">Fiddler</a> - 跨平台的 Web 调试代理工具</li><li><a href="https://github.com/mitmproxy/mitmproxy">mitmproxy</a> - 交互式 HTTPS 代理，支持 PC 和 APP 抓包。</li></ul><p><strong>平台</strong></p><ul><li><a href="https://www.postman.com/">Postman</a> - API 开发协作平台。</li><li><a href="https://github.com/YMFE/yapi">YApi</a> - 可本地部署的、打通前后端及测试的可视化的接口管理平台。</li><li><a href="https://github.com/hoppscotch/hoppscotch">hoppscotch</a> - 类似 Postman 的开源 API 开发协作平台。</li></ul><p><strong>浏量回放</strong></p><ul><li><a href="https://github.com/buger/goreplay">GoReplay</a> - 使用 go 开发的浏量回放工具。</li><li><a href="https://github.com/vcr/vcr">vcr</a> - 记录测试套件的 HTTP 交互，并在以后的测试运行期间重播它们，以进行快速，确定性和准确的测试。</li></ul><p><strong>框架</strong></p><ul><li><a href="https://github.com/apiaryio/dredd">Dredd</a> - 与语言无关的 HTTP API 测试工具。</li><li><a href="https://github.com/httprunner/httprunner">HttpRunner</a>* - *一个简单，优雅但功能强大的 HTTP（S）测试框架。</li><li><a href="https://github.com/rest-assured/rest-assured">rest-assured </a>- Java DSL，可轻松测试 REST 服务。</li></ul><p><strong>其他</strong></p><ul><li><a href="https://github.com/httpie/httpie">HTTPie</a> - 类似 cURL 但用起来更人性化也更强大的 HTTP 命令行工具。</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><a href="https://github.com/dbeaver/dbeaver">DBeaver</a> - 基于 Java 开发的通用数据库管理和开发工具。</li><li><a href="https://github.com/akopytov/sysbench">sysbench</a> - 基于 LuaJIT 的可编写脚本的多线程基准测试工具，常用于数据库基准测试。</li></ul><h2 id="性能测试-1"><a href="#性能测试-1" class="headerlink" title="性能测试"></a>性能测试</h2><ul><li>JMeter -</li><li><a href="https://github.com/loadimpact/k6">k6</a> - 使用 Go 和 JavaScript 的现代负载测试工具。</li><li><a href="https://github.com/nakabonne/ali">ali</a> - 生成 HTTP 负载并实时绘制结果。</li><li><a href="https://github.com/alexei-led/pumba">Pumba</a> - Docker 的混沌测试工具。</li><li><a href="https://github.com/tsenart/vegeta">Vegeta</a> - 多功能的 HTTP 负载测试工具。</li></ul><h1 id="三-领域测试"><a href="#三-领域测试" class="headerlink" title="三. 领域测试"></a>三. 领域测试</h1><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><h1 id="四-测试管理"><a href="#四-测试管理" class="headerlink" title="四. 测试管理"></a>四. 测试管理</h1><ul><li><a href="https://github.com/didi/AgileTC">AgileTC</a> - 敏捷的测试用例管理平台，支持测试用例管理、执行计划管理、进度计算、多人实时协同等能力。（滴滴）</li></ul><h1 id="五-测试框架"><a href="#五-测试框架" class="headerlink" title="五. 测试框架"></a>五. 测试框架</h1><h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="https://github.com/dreamhead/moco">Moco</a> - 一个简单的 Mock 工具。</li><li><a href="https://github.com/mockito/mockito">Mockito</a> - 单元测试的 Mocking 框架。</li></ul><h2 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h2><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="https://github.com/didi/super-jacoco">Super-Jacoco</a> - 基于 Jacoco、Git 二次开发打造的一站式 JAVA 代码全量/diff 覆盖率收集平台。（滴滴）</li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li>pytest</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><a href="https://github.com/mochajs/mocha">Mocha</a> - 用于 node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架。</li><li><a href="https://github.com/facebook/jest">Jest</a> - 令人愉快的 JavaScript 测试。</li><li><a href="https://github.com/jhnns/rewire">rewire</a> - 轻松的进行 Node.js 单元测试。</li><li><a href="https://github.com/dubzzz/fast-check">fast-check</a> - 使用 TypeScript 编写的 JavaScript 属性测试框架。</li></ul><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li><a href="https://github.com/robolectric/robolectric">Robolectric</a> - Android 单元测试框架。</li><li><a href="https://github.com/google/truth">Truth</a> - Java 和 Android 的流畅断言，类似  AssertJ。</li></ul><h2 id="通用框架"><a href="#通用框架" class="headerlink" title="通用框架"></a>通用框架</h2><ul><li><a href="https://github.com/robotframework/robotframework">robotframework</a> - 用于验收测试和 RPA 的通用自动化框架。</li><li><a href="https://github.com/Blazemeter/taurus">taurus</a> - 通过自动化友好的框架进行连续测试。</li></ul><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><ul><li><a href="https://github.com/allure-framework/allure2">Allure</a> - 灵活的轻量级多语言测试报告工具。</li></ul><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><a href="https://github.com/TitouanVanBelle/XCTestHTMLReport">XCTestHTMLReport </a>- 用于单元和 UI 测试的类似 Xcode 的 HTML 报告。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;软件测试工具大全，包括测试工具、框架和平台，偏向开源和免费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;br&gt;表示&lt;strong&gt;开源软件&lt;/strong&gt;；&lt;br&gt;表示&lt;strong&gt;免费&lt;/strong&gt;使用，或者个人&lt;strong&gt;免费&lt;/strong&gt; </summary>
      
    
    
    
    <category term="测试工具" scheme="https://www.zuolh.com/categories/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="测试工具" scheme="https://www.zuolh.com/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>博客第1期</title>
    <link href="https://www.zuolh.com/2021/04/13/yuque/%E5%8D%9A%E5%AE%A2%E7%AC%AC1%E6%9C%9F/"/>
    <id>https://www.zuolh.com/2021/04/13/yuque/%E5%8D%9A%E5%AE%A2%E7%AC%AC1%E6%9C%9F/</id>
    <published>2021-04-13T13:54:00.000Z</published>
    <updated>2021-09-07T08:02:39.237Z</updated>
    
    <content type="html"><![CDATA[<p>该博客模版案例来自  <a href="#">@蚂蚁金服体验技术部</a></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="插入带链接的标题（ctrl-K）Best-Year-in-Music"><a href="#插入带链接的标题（ctrl-K）Best-Year-in-Music" class="headerlink" title="插入带链接的标题（ctrl+K）Best Year in Music"></a>插入带链接的标题（ctrl+K）<a href="https://pudding.cool/projects/music-history/">Best Year in Music</a></h3><p>这幅可视化作品展示了 1960 年以来，Billboard  历年榜单的前五名音乐的变化情况，效果呈现设计感十足，还可以在聆听音乐的同时回顾音乐的变迁史。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743511172-7dfff3da-684a-4902-babc-cd9117fe3b7a.png#align=left&display=inline&height=648&name=image.png&originHeight=1296&originWidth=2868&size=965213&status=done&width=1434" alt="image.png"><br><em>插入图片，点击图片，设置图片大小</em><br>值得一提的是，作者正是大名鼎鼎的数据新闻站点  <a href="https://pudding.cool/">The Pudding</a>。作为可视化新闻媒体中的姣姣者，The Pudding 擅长对那些兼具信息量和娱乐度的争议性话题进行可视化呈现，来使得复杂的观点变得更容易被公众理解。该团队虽然仅由数名全职记者和工程师组成，但战斗力强悍，目前已有数十个大型的数据可视化作品。<br>输入作者  <a href="/dengfuping">@诸岳(dengfuping)</a></p><h3 id="Road-Suffixes-in-the-USA"><a href="#Road-Suffixes-in-the-USA" class="headerlink" title="Road Suffixes in the USA"></a><a href="https://erdavis.com/2019/07/04/road-suffixes-in-the-usa-take-2/">Road Suffixes in the USA</a></h3><p>美国道路命名多种多样，例如著名的纽约第五大道（Fifth Avenue），又或者凤凰城（Phoenix）的 Washington Street，Thomas Road，Union Hill Drive 等。不同的道路，有不同的叫法，Avenue, Street, Road, Drive 等等。想了解更多关于美国道路命名可以参考<a href="http://blog.sina.com.cn/s/blog_7010d1db0101he93.html">这篇文章</a>。<br>作者用 R 语言统计了美国每个县的每种道路后缀（例如 Avenue）的总里程，并把每个县总里程最大的道路后缀通过颜色映射到地图上。可以看出美国大部分县的道路都是以 Rd(Road 的缩写)结尾的。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743625739-f1c8b376-5632-4d08-8fcc-56142f0b0c1a.png#align=left&display=inline&height=603&name=road-suffix-map.png&originHeight=1767&originWidth=2048&size=328604&status=done&width=699" alt="road-suffix-map.png"><br><em>插入图片，点击图片，设置图片大小</em></p><p>另外还以柱状图的方式展示了每种道路后缀的总里程（英里）：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/85075/1569743625720-b8759449-4b6a-4b11-bbc0-896fe8dca73e.png#align=left&display=inline&height=737&name=road-suffix-bar.png&originHeight=737&originWidth=890&size=23572&status=done&width=890" alt="road-suffix-bar.png"><br>by <a href="/changzhe">@长哲(changzhe)</a></p><h1 id="「加餐」Hello-World-图可视化"><a href="#「加餐」Hello-World-图可视化" class="headerlink" title="「加餐」Hello World 图可视化"></a><a href="https://zhuanlan.zhihu.com/p/83685690">「</a><a href="https://zhuanlan.zhihu.com/p/83685690">加餐」</a><a href="https://zhuanlan.zhihu.com/p/83685690">Hello World 图可视化</a></h1><p>图可视化是信息可视化的子领域，它通过展示元素、关系，帮助用户获取数据的洞悉能力。它已被广泛地应用在流程图、社交网络、英特网、蛋白质网络等关系数据的呈现。<br><a href="https://zhuanlan.zhihu.com/p/83685690">本文</a>由 AntV 团队  <a href="/shiwu-5wap2">@十吾(shiwu-5wap2)</a> 👆 撰写，参考自[1][2]两篇图可视化学术论文，简要介绍图可视化的历史、背景、机遇与挑战。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该博客模版案例来自  &lt;a href=&quot;#&quot;&gt;@蚂蚁金服体验技术部&lt;/a&gt;&lt;/p&gt;
&lt;h3 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;插入带链接的标题（ctrl-K）Best-Year-in-Music</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DONE</title>
    <link href="https://www.zuolh.com/2020/04/18/yuque/DONE/"/>
    <id>https://www.zuolh.com/2020/04/18/yuque/DONE/</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2021-09-07T08:02:39.209Z</updated>
    
    <content type="html"><![CDATA[<p>TEST 是不是同步发布</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TEST 是不是同步发布&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.zuolh.com/categories/Hexo/"/>
    
    
    <category term="Github" scheme="https://www.zuolh.com/tags/Github/"/>
    
    <category term="Hexo" scheme="https://www.zuolh.com/tags/Hexo/"/>
    
    <category term="Yuque" scheme="https://www.zuolh.com/tags/Yuque/"/>
    
  </entry>
  
</feed>
